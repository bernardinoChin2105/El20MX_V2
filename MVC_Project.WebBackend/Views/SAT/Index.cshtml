@model MVC_Project.WebBackend.Models.SATViewModel

@{
    ViewBag.Title = "Sucursales";
}

@section Styles {
    <link href="~/Content/template/plugins/cropper/cropper.min.css" rel="stylesheet" />
    <style>
        /* Limit image width to avoid overflow the container */
        img {
            max-width: 100%; /* This rule is very important, please do not ignore this! */
        }
    </style>
    <link href="~/Content/template/plugins/iCheck/skins/square/blue.css" rel="stylesheet" />
}

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Editar</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm("Edit", "SATController", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "EditForm", @enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(x => x.id);
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            <div class="ibox float-e-margins">
                                <div class="ibox-title">
                                    <h5>General</h5>
                                </div>
                                <div class="ibox-content">
                                    <div class="form-group row">
                                        <div class="col-12 col-md-4">
                                            @Html.LabelFor(model => model.rfc, new { @class = "col-form-label control-label" })
                                            @Html.TextBoxFor(model => model.rfc, new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" })
                                            @Html.ValidationMessageFor(model => model.rfc)
                                        </div>
                                        <div class="col-12 col-md-4">
                                            @Html.LabelFor(model => model.name, new { @class = "col-form-label control-label" })
                                            @Html.TextBoxFor(model => model.name, new { @class = "form-control", required = "required", @autocomplete = "off" })
                                            @Html.ValidationMessageFor(model => model.name)
                                        </div>
                                        <div class="col-12 col-md-4">
                                            <div class="col-md-3">
                                                <img id="image" src="/Content/img/profile_small.jpg">

                                            </div>
                                            <div class="col-md-1">
                                                <label title="Subir imagen" for="inputImage" class="btn btn-default btn-sm" style="margin-top:100%">
                                                    <input type="file" accept="image/*" name="file" id="inputImage" style="display:none">
                                                    <i class="fas fa-upload"></i>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="ibox float-e-margins">
                                <div class="ibox-title">
                                    <h5>CIEC</h5>
                                </div>
                                <div class="ibox-content">
                                    <div class="form-group row">
                                        <div class="col-12 col-md-4">
                                            @Html.LabelFor(model => model.ciec, new { @class = "col-form-label control-label" })
                                            <div class="input-group">
                                                <div class="input-group-append view-ciec">
                                                    <span class="input-group-text" title="Ver contraseña">
                                                        <i class="fa fa-eye"></i>
                                                    </span>
                                                </div>
                                                @Html.TextBoxFor(model => model.ciec, new { @class = "form-control view-ciec-input", @type = "password", @autocomplete = "off" })
                                                @Html.ValidationMessageFor(model => model.ciec)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="ibox float-e-margins">
                                <div class="ibox-title">
                                    <h5>FIEL</h5>
                                </div>
                                <div class="ibox-content">
                                    <div class="form-group row">
                                        <div class="col-12 col-md-4">
                                            @Html.LabelFor(model => model.cer, new { @class = "col-form-label control-label" })
                                            <div class="custom-file form-control">
                                                @Html.TextBoxFor(model => model.cer, new { @class = "custom-file-input", @autocomplete = "off", type = "file" })
                                                <label for="files" class="custom-file-label"></label>
                                                @Html.ValidationMessageFor(model => model.cer)
                                            </div>
                                        </div>

                                        <div class="col-12 col-md-4">
                                            @Html.LabelFor(model => model.key, new { @class = "col-form-label control-label" })
                                            <div class="custom-file form-control">
                                                @Html.TextBoxFor(model => model.key, new { @class = "custom-file-input", @autocomplete = "off", type = "file" })
                                                <label for="files" class="custom-file-label"></label>
                                                @Html.ValidationMessageFor(model => model.key)
                                            </div>
                                        </div>
                                        <div class="col-12 col-md-4">
                                            @Html.LabelFor(model => model.eFirma, new { @class = "col-form-label control-label" })
                                            <div class="input-group">
                                                <div class="input-group-append view-e-firma">
                                                    <span class="input-group-text" title="Ver contraseña">
                                                        <i class="fa fa-eye"></i>
                                                    </span>
                                                </div>
                                                @Html.TextBoxFor(model => model.eFirma, new { @class = "form-control view-e-firma-input", @type = "password", @autocomplete = "off" })
                                                @Html.ValidationMessageFor(model => model.eFirma)
                                            </div>
                                        </div>
                                        <div class="col-12 col-md-4">
                                            @if (!string.IsNullOrEmpty(Model.cerUrl))
                                            {
                                                <a href="@Model.cerUrl">.cer actual</a>
                                            }
                                        </div>
                                        <div class="col-12 col-md-4">
                                            @if (!string.IsNullOrEmpty(Model.keyUrl))
                                            {
                                                <a href="@Model.keyUrl">.key actual</a>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row pull-right">
                                <div class="col-md-8 offset-2 text-right">
                                    <button type="button" id="btn-save" class="btn btn-color"> <i class="fa fa-save"></i> Guardar </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/plugins/datapicker/bootstrap-datepicker.js"></script>
    <script src="~/Scripts/plugins/datapicker/bootstrap-datepicker.es.js"></script>
    <script src="~/Scripts/plugins/cropper/cropper.min.js"></script>
    <script src="~/Scripts/plugins/touchspin/jquery.bootstrap-touchspin.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var $image = $('#image');

            $image.cropper({
                aspectRatio: 16 / 9,
                crop: function (event) {
                    console.log(event.detail.x);
                    console.log(event.detail.y);
                    console.log(event.detail.width);
                    console.log(event.detail.height);
                    console.log(event.detail.rotate);
                    console.log(event.detail.scaleX);
                    console.log(event.detail.scaleY);
                }
            });

            // Get the Cropper.js instance after initialized
            var cropper = $image.data('cropper');

            $('.chosen-select').chosen({ width: '100%', no_results_text: "Sin resultados para " });

            $(".view-ciec").mouseup(function () {
                $(".view-ciec-input").attr('type', 'password').data("view", false);
            }).mousedown(function () {
                if ($(".view-ciec-input").val() !== "") {
                    $(".view-ciec-input").attr('type', 'text').data("view", true);
                }
            });

            $(".view-e-firma").mouseup(function () {
                $(".view-e-firma-input").attr('type', 'password').data("view", false);
            }).mousedown(function () {
                if ($(".view-e-firma-input").val() !== "") {
                    $(".view-e-firma-input").attr('type', 'text').data("view", true);
                }
            });

            $('.custom-file-input').on('change', function (e) {
                let fileName = $(this).val().split('\\').pop();
                $(this).next('.custom-file-label').addClass("selected").html(fileName);
            });

            var mem = $('#data_1 .input-group.date').datepicker({
                //dateFormat: "yy-mm-dd"
                keyboardNavigation: false,
                todayBtn: "linked",
                forceParse: false,
                calendarWeeks: true,
                autoclose: true,
                format: "dd/mm/yyyy",
                language: "es"
            });

            $.validator.addMethod("Alphanumeric",
                function (value, element) {
                    return value.match(/^[A-Za-zÀ-ÿ\u00f1\u00d10-9 _.-]+$|^$/);
                }, "El campo debe ser alfanumérico"
            );

            $.validator.addMethod("Numeric",
                function (value, element) {
                    return value.match(/^[0-9]+$|^$/);
                }, "El campo debe ser numérico"
            );

            $.validator.addMethod("Alphabetic",
                function (value, element) {
                    return value.match(/^[a-zA-ZÀ-ÿ\u00f1\u00d1 ]+$|^$/);
                }, "El campo debe ser alfabético"
            );
            $("#EditForm").validate({
                rules: {
                }
            });

            if ($('#hasDeferredPayment').prop("checked")) {
                $("#partialitiesNumber").prop('readonly', false);
                $("#advancePayment").prop('readonly', false);
                $(".btn-opt").prop("disabled", false);
            } else {
                $("#partialitiesNumber").val(1);
                $("#advancePayment").val(0);
                $("#monthlyCharge").val($("#total").val());
                $("#partialitiesNumber").prop('readonly', true);
                $("#advancePayment").prop('readonly', true);
                $(".btn-opt").prop("disabled", true);
            }

        });

        $("#btn-save").on("click", function () {
            if (!$('#EditForm').valid()) {
                return;
            }
            $('#EditForm').submit();
        });

        $("#hasDeferredPayment").on("ifChanged", function () {
            if (this.checked) {
                $("#partialitiesNumber").prop('readonly', false);
                $("#advancePayment").prop('readonly', false);
                $(".btn-opt").prop("disabled", false);
            }
            else {
                $("#partialitiesNumber").val(1);
                $("#advancePayment").val(0);
                $("#monthlyCharge").val($("#total").val());
                $("#partialitiesNumber").prop('readonly', true);
                $("#advancePayment").prop('readonly', true);
                $(".btn-opt").prop("disabled", true);
            }
        });
    </script>
}
