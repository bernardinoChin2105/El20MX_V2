@model MVC_Project.WebBackend.Models.BranchOfficeViewModel

@{
    ViewBag.Title = "Sucursales";
}

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Editar</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm("Edit", "BranchOffice", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "EditForm", @enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(x => x.id);
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true)

                        <div class="form-group row">
                            @Html.LabelFor(model => model.name, new { @class = "col-form-label control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.name, new { @class = "form-control", required = "required", @autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.name)
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.cer, new { @class = "col-form-label control-label col-md-2" })
                            <div class="col-md-8">
                                <div class="custom-file form-control">
                                    @Html.TextBoxFor(model => model.cer, new { @class = "custom-file-input", @autocomplete = "off", type = "file" })
                                    <label for="files" class="custom-file-label"></label>
                                    @Html.ValidationMessageFor(model => model.cer)
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.key, new { @class = "col-form-label control-label col-md-2" })
                            <div class="col-md-8">
                                <div class="custom-file form-control">
                                    @Html.TextBoxFor(model => model.key, new { @class = "custom-file-input", @autocomplete = "off", type = "file" })
                                    <label for="files" class="custom-file-label"></label>
                                    @Html.ValidationMessageFor(model => model.key)
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-form-label control-label col-md-2">Archivos actuales</label>
                            <div class="col-md-8">
                                <ul>
                                    <li><a href="@Model.cerUrl">.cer</a></li>
                                    <li><a href="@Model.keyUrl">.key</a></li>
                                </ul>
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="ibox float-e-margins">
                                <div class="ibox-title">
                                    <h5>Domicilio de Ubicación (Domicilio Fiscal)</h5>
                                </div>
                                <div class="ibox-content">
                                    <div class="form-horizontal">
                                        <div class="form-group row">
                                            <div class="col-12 col-md-8">
                                                @Html.LabelFor(m => m.street, new { @class = "col-form-label control-label" })
                                                @Html.TextBoxFor(m => m.street, new { @class = "form-control", @maxlength = "250" })
                                            </div>
                                            <div class="col-12 col-md-4">
                                                @Html.LabelFor(m => m.outdoorNumber, new { @class = "col-form-label control-label" })
                                                @Html.TextBoxFor(m => m.outdoorNumber, new { @class = "form-control", @maxlength = "100" })
                                            </div>
                                        </div>

                                        <div class="form-group row">
                                            <div class="col-12 col-md-4">
                                                @Html.LabelFor(m => m.interiorNumber, new { @class = "col-form-label control-label" })
                                                @Html.TextBoxFor(m => m.interiorNumber, new { @class = "form-control", @maxlength = "20" })
                                            </div>
                                            <div class="col-12 col-md-4">
                                                @Html.LabelFor(m => m.zipCode, new { @class = "col-form-label control-label" })
                                                @Html.TextBoxFor(m => m.zipCode, new { @class = "form-control", @maxlength = "5" })
                                            </div>
                                            <div class="col-12 col-md-4">
                                                @Html.LabelFor(m => m.colony, new { @class = "col-form-label control-label" })
                                                @Html.DropDownListFor(m => m.colony, Model.listColony, new { @class = "form-control form-height" })
                                            </div>
                                        </div>

                                        <div class="form-group row">
                                            <div class="col-12 col-md-4">
                                                @Html.LabelFor(m => m.municipality, new { @class = "col-form-label control-label" })
                                                @Html.DropDownListFor(m => m.municipality, Model.listMunicipality, new { @class = "form-control" })
                                            </div>
                                            <div class="col-12 col-md-4">
                                                @Html.LabelFor(m => m.state, new { @class = "col-form-label control-label" })
                                                @Html.DropDownListFor(m => m.state, Model.listState, new { @class = "form-control" })
                                            </div>
                                            <div class="col-12 col-md-4">
                                                @Html.LabelFor(m => m.country, new { @class = "col-form-label control-label" })
                                                @Html.DropDownListFor(m => m.country, Model.listCountry, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row pull-right">
                            <div class="col-md-8 offset-2 text-right">
                                <a href='@Url.Action("Index", "BranchOffice")' class='btn btn-white'><i class="fa fa-times"></i> Cancelar</a>
                                <button type="button" id="btn-save" class="btn btn-color"> <i class="fa fa-save"></i> Guardar </button>
                            </div>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/plugins/datapicker/bootstrap-datepicker.js"></script>
    <script src="~/Scripts/plugins/datapicker/bootstrap-datepicker.es.js"></script>
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.13.4/jquery.mask.min.js"></script>*@
    <script src="~/Scripts/plugins/touchspin/jquery.bootstrap-touchspin.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.chosen-select').chosen({ width: '100%', no_results_text: "Sin resultados para " });
             var mem = $('#data_1 .input-group.date').datepicker({
                //dateFormat: "yy-mm-dd"
                keyboardNavigation: false,
                todayBtn: "linked",
                forceParse: false,
                calendarWeeks: true,
                autoclose: true,
                format: "dd/mm/yyyy",
                language: "es"
            });

            $.validator.addMethod("Alphanumeric",
                function (value, element) {
                    return value.match(/^[A-Za-zÀ-ÿ\u00f1\u00d10-9 _.-]+$|^$/);
                }, "El campo debe ser alfanumérico"
            );
            $("#EditForm").validate({
                rules: {

                }
            });

            $('.custom-file-input').on('change', function (e) {
                var files = $('#files').prop("files");
                var names = $.map(files, function (val) { return val.name; });
                var name = names.join(', ');
                $(this).next('.custom-file-label').addClass("selected").html(name);
            });
            
            if ($('#hasDeferredPayment').prop("checked")) {
                $("#partialitiesNumber").prop('readonly', false);
                $("#advancePayment").prop('readonly', false);
                $(".btn-opt").prop("disabled", false);
            } else {
                $("#partialitiesNumber").val(1);
                $("#advancePayment").val(0);
                $("#monthlyCharge").val($("#total").val());
                $("#partialitiesNumber").prop('readonly', true);
                $("#advancePayment").prop('readonly', true);
                $(".btn-opt").prop("disabled", true);
            }

        });

        $("#btn-save").on("click", function () {
            if (!$('#EditForm').valid()) {
                return;
            }
            $('#EditForm').submit();
        });
        
        $("#hasDeferredPayment").on("ifChanged", function () {
            if (this.checked) {
                $("#partialitiesNumber").prop('readonly', false);
                $("#advancePayment").prop('readonly', false);
                $(".btn-opt").prop("disabled", false);
            }
            else {
                $("#partialitiesNumber").val(1);
                $("#advancePayment").val(0);
                $("#monthlyCharge").val($("#total").val());
                $("#partialitiesNumber").prop('readonly', true);
                $("#advancePayment").prop('readonly', true);
                $(".btn-opt").prop("disabled", true);
            }
        });

    </script>
}
